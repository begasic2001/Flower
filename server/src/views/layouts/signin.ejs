<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Twitter -->
    <meta name="twitter:site" content="@themepixels">
    <meta name="twitter:creator" content="@themepixels">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Starlight">
    <meta name="twitter:description" content="Premium Quality and Responsive UI for Dashboard.">
    <meta name="twitter:image" content="http://themepixels.me/starlight/img/starlight-social.png">

    <!-- Facebook -->
    <meta property="og:url" content="http://themepixels.me/starlight">
    <meta property="og:title" content="Starlight">
    <meta property="og:description" content="Premium Quality and Responsive UI for Dashboard.">

    <meta property="og:image" content="http://themepixels.me/starlight/img/starlight-social.png">
    <meta property="og:image:secure_url" content="http://themepixels.me/starlight/img/starlight-social.png">
    <meta property="og:image:type" content="image/png">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="600">

    <!-- Meta -->
    <meta name="description" content="Premium Quality and Responsive UI for Dashboard.">
    <meta name="author" content="ThemePixels">
    <!-- vendor css -->
    <link href="/lib/font-awesome/css/font-awesome.css" rel="stylesheet">
    <link href="/lib/Ionicons/css/ionicons.css" rel="stylesheet">


    <!-- Starlight CSS -->
    <link rel="stylesheet" href="/css/starlight.css">
</head>

<body>

    <div class="d-flex align-items-center justify-content-center bg-sl-primary ht-100v">
        <form action="" method="">
            <div class="login-wrapper wd-300 wd-xs-350 pd-25 pd-xs-40 bg-white">
                <div class="signin-logo tx-center tx-24 tx-bold tx-inverse">Đăng <span class="tx-info tx-normal">Nhập</span></div>
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Nhập email" name="email">
                </div><!-- form-group -->
                <div class="form-group">
                    <input type="password" class="form-control" placeholder="Nhập password" name="password">
                    <a href="" class="tx-info tx-12 d-block mg-t-10">Quên mật khẩu ?</a>
                </div><!-- form-group -->
                <button type="submit" class="btn btn-info btn-block">Đăng nhập</button>
                <button type="submit" class="btn btn-info btn-block" id="getList">Get List</button>
        </form>
                <div class="mg-t-60 tx-center">Bạn chưa có tài khoản ? <a href="/register" class="tx-info">Đăng ký</a>
                </div>
            </div><!-- login-wrapper -->
       
       
    </div><!-- d-flex -->

    <script src="/lib/jquery/jquery.js"></script>
    <script src="/lib/popper.js/popper.js"></script>
    <script src="/lib/bootstrap/bootstrap.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.2.0/axios.min.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script>
        // $(document).on('click','button',function(e){
        //     e.preventDefault();
        //     const email = $('input[name="email"]').val()
        //     const password = $('input[name="password"]').val()
        //     $.ajax({
        //         url: "http://localhost:9000/api/auth/login",
        //         type: "POST",
        //         data: {
        //             email: email,
        //             password: password,
        //         }
        //     }).then(data => {
        //             window.localStorage.setItem('accessToken',data.accessToken)
        //           swal(`Đăng nhập thành công`)
        //             .then(() => {
        //                 window.location.replace('/');
        //             })
        //     })
        // })
       
        const instance = axios.create({
                baseURL: 'http://localhost:9000',
                timeout: 3 * 1000,
                headers: {
                    'Content-Type': 'Application/json'
                }
            });

            instance.interceptors.request.use(async function (config) {
                if(config.url.indexOf('/api/auth/login') >=0 || config.url.indexOf('/api/auth/refresh-token') >= 0){
                    return config
                }
                const token = await instance.getLocalAccessToken()
                config.headers['authorization'] =  `Bearer ${token}` 
                console.log(`Trước khi request:::::::`, token)
                return config
            }, function (error) {
                // Do something with request error
                return Promise.reject(error);
            });

            instance.interceptors.response.use(async function (response) {
                console.log(`Sau khi request:::::::`,response.data)
                const config = response.config
                if(config.url.indexOf('/api/auth/login') >=0 || config.url.indexOf('/api/auth/refresh-token') >= 0){
                   return response
                }
                const {status,message} = response.data
                if(status && status === 401){
                    //if(message && message === 'jwt expired')
                    console.log('Trường hợp token hết hạn :::::::::::::::', message)
                    //B1 get accessToken from refreshToken
                    const token  = await instance.getLocalRefreshToken()
                    const newRefresh = await refreshToken(token)
                    if(newRefresh){
                        console.log(`Đã lấy lại token thành công :::::::::`)
                        //B2 Đã lấy lại token
                        config.headers['authorization'] = `Bearer ${newRefresh.accessToken}` 
                        // // B3
                         await instance.setLocalAccessToken(newRefresh.accessToken)
                         await instance.setLocalRefreshToken(newRefresh.refreshToken)
                         return instance(config)
                    }
                }

                return response
            }, function (error) {  
                return Promise.reject(error);
            });

            const btnLogin = document.querySelector('button');
            if(btnLogin){
                btnLogin.addEventListener('click',async(e)=> {
                    e.preventDefault()
                   const {status,accessToken,refreshToken} = await login()
                   if(status == 'success'){
                    // set accessToken and refreshToken in cookies or localstorage
                    await instance.setLocalAccessToken(accessToken)
                    await instance.setLocalRefreshToken(refreshToken)
                   }
                })
            }

            const btnGetList = document.querySelector('#getList');
                if (btnGetList) {
                    btnGetList.addEventListener('click', async (e) => {
                        e.preventDefault()
                        const a = await getList()
                        console.table(a)
                    })
                }
            
            async function login(){
                const email = $('input[name="email"]').val()
                const password = $('input[name="password"]').val()
                
                return await instance.post('/api/auth/login', {
                    email: email,
                    password: password,
                }).then((result) => {  
                    return result.data
                });
            }

               async function refreshToken(refreshToken) {
                    return await instance.post('/api/auth/refresh-token', {
                        refreshToken: refreshToken
                    }).then((result) => {
                        return result.data
                    });
                }

                   async function getList() {
                        return await instance.get('/api/auth/getlist').then((result) => {
                           return result.data
                       });
                    }
            instance.setLocalAccessToken = async (token)=>{
                window.localStorage.setItem('accessToken',token)
            }

             instance.setLocalRefreshToken = async (token) => {
                    window.localStorage.setItem('refreshToken', token)
                }

            instance.getLocalAccessToken = async () => {
                   return window.localStorage.getItem('accessToken') ? window.localStorage.getItem('accessToken') : null
                  
                }
            instance.getLocalRefreshToken = async () => {
                    return window.localStorage.getItem('refreshToken') ? window.localStorage.getItem('refreshToken') : null

                }
    </script>
</body>

</html>